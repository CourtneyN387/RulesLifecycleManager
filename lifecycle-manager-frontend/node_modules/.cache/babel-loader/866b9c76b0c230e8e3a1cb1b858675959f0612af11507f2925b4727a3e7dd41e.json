{"ast":null,"code":"import { cubicBezier, steps } from '@motionone/easing';\nimport { isFunction, noopReturn } from '@motionone/utils';\nconst namedEasings = {\n  ease: cubicBezier(0.25, 0.1, 0.25, 1.0),\n  \"ease-in\": cubicBezier(0.42, 0.0, 1.0, 1.0),\n  \"ease-in-out\": cubicBezier(0.42, 0.0, 0.58, 1.0),\n  \"ease-out\": cubicBezier(0.0, 0.0, 0.58, 1.0)\n};\nconst functionArgsRegex = /\\((.*?)\\)/;\nfunction getEasingFunction(definition) {\n  // If already an easing function, return\n  if (isFunction(definition)) return definition;\n  // If an easing curve definition, return bezier function\n  if (Array.isArray(definition)) return cubicBezier(...definition);\n  // If we have a predefined easing function, return\n  if (namedEasings[definition]) return namedEasings[definition];\n  // If this is a steps function, attempt to create easing curve\n  if (definition.startsWith(\"steps\")) {\n    const args = functionArgsRegex.exec(definition);\n    if (args) {\n      const argsArray = args[1].split(\",\");\n      return steps(parseFloat(argsArray[0]), argsArray[1].trim());\n    }\n  }\n  return noopReturn;\n}\nexport { getEasingFunction };","map":{"version":3,"names":["cubicBezier","steps","isFunction","noopReturn","namedEasings","ease","functionArgsRegex","getEasingFunction","definition","Array","isArray","startsWith","args","exec","argsArray","split","parseFloat","trim"],"sources":["/Users/courtneynguyen2/Documents/git/lifecycle-manager-frontend/node_modules/@motionone/animation/dist/utils/easing.es.js"],"sourcesContent":["import { cubicBezier, steps } from '@motionone/easing';\nimport { isFunction, noopReturn } from '@motionone/utils';\n\nconst namedEasings = {\n    ease: cubicBezier(0.25, 0.1, 0.25, 1.0),\n    \"ease-in\": cubicBezier(0.42, 0.0, 1.0, 1.0),\n    \"ease-in-out\": cubicBezier(0.42, 0.0, 0.58, 1.0),\n    \"ease-out\": cubicBezier(0.0, 0.0, 0.58, 1.0),\n};\nconst functionArgsRegex = /\\((.*?)\\)/;\nfunction getEasingFunction(definition) {\n    // If already an easing function, return\n    if (isFunction(definition))\n        return definition;\n    // If an easing curve definition, return bezier function\n    if (Array.isArray(definition))\n        return cubicBezier(...definition);\n    // If we have a predefined easing function, return\n    if (namedEasings[definition])\n        return namedEasings[definition];\n    // If this is a steps function, attempt to create easing curve\n    if (definition.startsWith(\"steps\")) {\n        const args = functionArgsRegex.exec(definition);\n        if (args) {\n            const argsArray = args[1].split(\",\");\n            return steps(parseFloat(argsArray[0]), argsArray[1].trim());\n        }\n    }\n    return noopReturn;\n}\n\nexport { getEasingFunction };\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,KAAK,QAAQ,mBAAmB;AACtD,SAASC,UAAU,EAAEC,UAAU,QAAQ,kBAAkB;AAEzD,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAEL,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC;EACvC,SAAS,EAAEA,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EAC3C,aAAa,EAAEA,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC;EAChD,UAAU,EAAEA,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;AAC/C,CAAC;AACD,MAAMM,iBAAiB,GAAG,WAAW;AACrC,SAASC,iBAAiBA,CAACC,UAAU,EAAE;EACnC;EACA,IAAIN,UAAU,CAACM,UAAU,CAAC,EACtB,OAAOA,UAAU;EACrB;EACA,IAAIC,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,EACzB,OAAOR,WAAW,CAAC,GAAGQ,UAAU,CAAC;EACrC;EACA,IAAIJ,YAAY,CAACI,UAAU,CAAC,EACxB,OAAOJ,YAAY,CAACI,UAAU,CAAC;EACnC;EACA,IAAIA,UAAU,CAACG,UAAU,CAAC,OAAO,CAAC,EAAE;IAChC,MAAMC,IAAI,GAAGN,iBAAiB,CAACO,IAAI,CAACL,UAAU,CAAC;IAC/C,IAAII,IAAI,EAAE;MACN,MAAME,SAAS,GAAGF,IAAI,CAAC,CAAC,CAAC,CAACG,KAAK,CAAC,GAAG,CAAC;MACpC,OAAOd,KAAK,CAACe,UAAU,CAACF,SAAS,CAAC,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC,CAAC;IAC/D;EACJ;EACA,OAAOd,UAAU;AACrB;AAEA,SAASI,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}